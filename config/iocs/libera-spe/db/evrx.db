include "db/evrx_triggers.db"
include "db/evrx_events.db"


record(libera, "$(P):$(B):rtc:t1:in_function") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t1.in_function")
}

record(libera, "$(P):$(B):clk_mgr:mc:source") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clk_mgr.mc.source")
}

record(libera, "$(P):$(B):clock_info:adc_frequency") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clock_info.adc_frequency")
}
record(libera, "$(P):$(B):rtc:t0:in_function") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t0.in_function")
}

record(libera, "$(P):$(B):mgt:status:rx_loss_of_sync") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.status.rx_loss_of_sync")
}

record(libera, "$(P):$(B):rtc:t2:code") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t2.code")
}

record(libera, "$(P):$(B):mgt:status:tx_buf") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.status.tx_buf")
}

record(libera, "$(P):$(B):info:customer") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.customer")
}

record(libera, "$(P):$(B):rtc:mgt_out") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.mgt_out")
}

record(libera, "$(P):$(B):mgt:ctrl:tx_power_down") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.ctrl.tx_power_down")
}

record(libera, "$(P):$(B):rtc:t2:in_mask") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t2.in_mask")
}

record(libera, "$(P):$(B):pll:vcxo_offset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).pll.vcxo_offset")
}

record(libera, "$(P):$(B):sfp_freq") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).sfp_freq")
}

record(libera, "$(P):$(B):mgt:status:pll_lock") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.status.pll_lock")
}

record(libera, "$(P):$(B):mgt:ctrl:reset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.ctrl.reset")
}

record(libera, "$(P):$(B):info:health_status") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.health_status")
}

record(libera, "$(P):$(B):clk_mgr:sc:locked") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clk_mgr.sc.locked")
}

record(libera, "$(P):$(B):mgt:ctrl:rx_power_down") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.ctrl.rx_power_down")
}

record(libera, "$(P):$(B):rtc:stream_filter:in_function") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.stream_filter.in_function")
}

record(libera, "$(P):$(B):rtc:t0:in_mask") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t0.in_mask")
}

record(libera, "$(P):$(B):pll:locked") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).pll.locked")
}

record(libera, "$(P):$(B):clk_mgr:sc:source") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clk_mgr.sc.source")
}

record(libera, "$(P):$(B):info:revision") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).info.revision")
}

record(libera, "$(P):$(B):pll:compensate_offset") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).pll.compensate_offset")
}

record(libera, "$(P):$(B):mgt:ctrl:loop") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.ctrl.loop")
}

record(libera, "$(P):$(B):mgt:status:rx_buf") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.status.rx_buf")
}

record(libera, "$(P):$(B):rtc:decoder_switch") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.decoder_switch")
}

record(libera, "$(P):$(B):mgt:err:frame") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.err.frame")
}

record(libera, "$(P):$(B):rtc:t0:code") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t0.code")
}

record(libera, "$(P):$(B):rtc:stream_filter:in_mask") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.stream_filter.in_mask")
}

record(libera, "$(P):$(B):mgt:err:hard") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.err.hard")
}

record(libera, "$(P):$(B):rtc:t1:in_mask") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t1.in_mask")
}

record(libera, "$(P):$(B):clk_mgr:mc:locked") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).clk_mgr.mc.locked")
}

record(libera, "$(P):$(B):rtc:t1:code") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t1.code")
}

record(libera, "$(P):$(B):mgt:err:soft") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).mgt.err.soft")
}

record(libera, "$(P):$(B):pll:clk_good") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).pll.clk_good")
}

record(libera, "$(P):$(B):rtc:t2:in_function") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).rtc.t2.in_function")
}

record(liberaSignal, "$(P):$(B):evrx") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.evrx")
}

record(liberaSignal, "$(P):$(B):pll") 
{
    info(MCII,  "mcii://$(D)/boards.$(MB).signals.pll")
    field(SCAN, "I/O Intr")
}
